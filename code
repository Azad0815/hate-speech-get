import pandas as pd
import numpy as np
import re
import string
import nltk
import streamlit as st
from nltk.corpus import stopwords
from nltk.stem import SnowballStemmer
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeClassifier

# Download stopwords
nltk.download('stopwords')

# Load dataset
data = pd.read_csv("test_tweets_anuFYb8.csv")

# Ensure correct label mapping (modify as needed)
label_mapping = {0: "Hate Speech", 1: "Offensive Language", 2: "No Hate and Offensive"}
if "id" in data.columns:  # Adjust if labels are in another column
    data["labels"] = data["id"].map(label_mapping)
data = data[["tweet", "labels"]].dropna()  # Remove rows with missing labels

# Initialize text processing tools
stemmer = SnowballStemmer("english")
stopword_set = set(stopwords.words("english"))

def clean_text(text):
    text = text.lower()
    text = re.sub(r'\[.*?\]', '', text)
    text = re.sub(r'https?://\S+|www\.\S+', '', text)
    text = re.sub(r'<.*?>+', '', text)
    text = re.sub(r'[%s]' % re.escape(string.punctuation), '', text)
    text = re.sub(r'\n', '', text)
    text = re.sub(r'\w*\d\w*', '', text)
    
    words = text.split()
    words = [stemmer.stem(word) for word in words if word not in stopword_set]
    return " ".join(words)

# Apply text cleaning
data["tweet"] = data["tweet"].apply(clean_text)

# Feature extraction
vectorizer = CountVectorizer()
X = vectorizer.fit_transform(data["tweet"])

# Prepare labels
y = np.array(data["labels"])

# Train-test split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33, random_state=42)

# Model training
clf = DecisionTreeClassifier()
clf.fit(X_train, y_train)

# Streamlit app function
def hate_speech_detection():
    st.title("ðŸ›‘ Hate Speech Detection")
    user_input = st.text_area("Enter a Tweet to analyze:")
    
    if user_input:
        transformed_input = vectorizer.transform([clean_text(user_input)])
        prediction = clf.predict(transformed_input)[0]
        st.success(f"Predicted Label: **{prediction}**")

# Run Streamlit app
if __name__ == "__main__":
    hate_speech_detection()
